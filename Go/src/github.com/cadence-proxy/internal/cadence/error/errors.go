//-----------------------------------------------------------------------------
// FILE:		errors.go
// CONTRIBUTOR: John C Burns
// COPYRIGHT:	Copyright (c) 2016-2019 by neonFORGE, LLC.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package proxyerror

import (
	"fmt"
	"reflect"

	"go.uber.org/cadence"
)

type (

	// CadenceError is a struct used to pass errors
	// generated by calls to the cadence server from the
	// cadence-proxy to the Neon.Cadence Library.
	CadenceError struct {
		String *string `json:"String"`
		Type   *string `json:"Type"`
	}
)

// NewCadenceError is the constructor for a CadenceError
// when supplied parameters.
//
// param err error -> error to set.
//
// param errorType ...interface{} -> the cadence error type.
func NewCadenceError(err error, errTypes ...CadenceErrorType) *CadenceError {
	if err == nil || reflect.ValueOf(err).IsNil() {
		return nil
	}

	if v, ok := err.(*CadenceError); ok {
		return v
	}

	var errType CadenceErrorType
	if len(errTypes) > 0 {
		errType = errTypes[0]
	} else {
		if cadence.IsCanceledError(err) {
			errType = Cancelled
		} else if cadence.IsCustomError(err) {
			errType = Custom
		} else if cadence.IsGenericError(err) {
			errType = Generic
		} else if cadence.IsPanicError(err) {
			errType = Panic
		} else if cadence.IsTerminatedError(err) {
			errType = Terminated
		} else if cadence.IsTimeoutError(err) {
			errType = Timeout
		} else {
			errType = Custom
		}
	}

	errStr := err.Error()
	errTypeStr := errType.String()

	return &CadenceError{String: &errStr, Type: &errTypeStr}
}

func (c *CadenceError) Error() string {
	if c.String == nil {
		return ""
	}

	return *c.String
}

// ToError returns an error interface from a CadenceError
// instance.  If the CadenceError is of type Custom or
// Canceled, the resulting Cadence client errors will
// be returned.
//
// error -> the CadenceError as an error interface.
func (c *CadenceError) ToError() error {
	var err error
	errType := c.GetType()
	switch errType {
	case Custom:
		err = cadence.NewCustomError(c.Error())
		break
	case Cancelled:
		err = cadence.NewCanceledError(c.Error())
	default:
		return c
	}

	return err
}

// GetType gets the CadenceErrorType from a CadenceError
// instance.
//
// returns CadenceErrorType -> the corresponding error type to the
// string representing the error type in a CadenceError instance
func (c *CadenceError) GetType() CadenceErrorType {
	if c.Type == nil {
		err := fmt.Errorf("no error type set")
		panic(err)
	}

	switch *c.Type {
	case "cancelled":
		return Cancelled
	case "custom":
		return Custom
	case "generic":
		return Generic
	case "panic":
		return Panic
	case "terminated":
		return Terminated
	case "timeout":
		return Timeout
	default:
		err := fmt.Errorf("unrecognized error type %v", *c.Type)
		panic(err)
	}
}

// IsCustomError determines if an error
// is a CadenceError of type Custom.
//
// param err error -> the error to evaluate.
//
// returns bool -> error is a CadenceError of type
// Custom or not.
func IsCustomError(err error) bool {
	if err != nil && !reflect.ValueOf(err).IsNil() {
		if v, ok := err.(*CadenceError); ok {
			if v.GetType() == Custom {
				return true
			}
		} else {
			return cadence.IsCustomError(err)
		}
	}

	return false
}

// IsCancelledError determines if an error
// is a CadenceError of type Cancelled.
//
// param err error -> the error to evaluate.
//
// returns bool -> error is a CadenceError of type
// Cancelled or not.
func IsCancelledError(err error) bool {
	if err != nil && !reflect.ValueOf(err).IsNil() {
		if v, ok := err.(*CadenceError); ok {
			if v.GetType() == Cancelled {
				return true
			}
		} else {
			return cadence.IsCanceledError(err)
		}
	}

	return false
}

// IsGenericError determines if an error
// is a CadenceError of type Generic.
//
// param err error -> the error to evaluate.
//
// returns bool -> error is a CadenceError of type
// Generic or not.
func IsGenericError(err error) bool {
	if err != nil && !reflect.ValueOf(err).IsNil() {
		if v, ok := err.(*CadenceError); ok {
			if v.GetType() == Generic {
				return true
			}
		} else {
			return cadence.IsGenericError(err)
		}
	}

	return false
}

// IsPanicError determines if an error
// is a CadenceError of type Panic.
//
// param err error -> the error to evaluate.
//
// returns bool -> error is a CadenceError of type
// Panic or not.
func IsPanicError(err error) bool {
	if err != nil && !reflect.ValueOf(err).IsNil() {
		if v, ok := err.(*CadenceError); ok {
			if v.GetType() == Panic {
				return true
			}
		} else {
			return cadence.IsPanicError(err)
		}
	}

	return false
}

// IsTerminatedError determines if an error
// is a CadenceError of type Terminated.
//
// param err error -> the error to evaluate.
//
// returns bool -> error is a CadenceError of type
// Terminated or not.
func IsTerminatedError(err error) bool {
	if err != nil && !reflect.ValueOf(err).IsNil() {
		if v, ok := err.(*CadenceError); ok {
			if v.GetType() == Terminated {
				return true
			}
		} else {
			return cadence.IsTerminatedError(err)
		}
	}

	return false
}

// IsTimeoutError determines if an error
// is a CadenceError of type Timeout.
//
// param err error -> the error to evaluate.
//
// returns bool -> error is a CadenceError of type
// Timeout or not.
func IsTimeoutError(err error) bool {
	if err != nil && !reflect.ValueOf(err).IsNil() {
		if v, ok := err.(*CadenceError); ok {
			if v.GetType() == Timeout {
				return true
			}
		} else {
			return cadence.IsTimeoutError(err)
		}
	}

	return false
}
